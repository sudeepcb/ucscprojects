head	1.4;
access;
symbols;
locks;
comment	@# @;


1.4
date	2011.05.20.02.53.59;	author -;	state -;
branches;
next	1.3;

1.3
date	2009.02.24.23.41.55;	author -;	state -;
branches;
next	1.2;

1.2
date	2009.02.24.23.16.07;	author -;	state -;
branches;
next	1.1;

1.1
date	2009.02.24.23.13.44;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@% $Id: mapcoloring.pl,v 1.3 2009-02-24 15:41:55-08 - - $ */

%
% Map coloring.
%
% Given an adjacency matrix, find a coloring of the map such
% that no two adjacent nodes have the same color.  The four
% color theorem says this is always possible with four colors.
%

not( X ) :- X, !, fail.
not( _ ).

%
% Specification of the nodes in the graph and the paths.
%

graph( [1,2,3,4,5] ).
path( 1, 2 ).
path( 1, 3 ).
path( 1, 4 ).
path( 2, 3 ).
path( 2, 4 ).
path( 3, 4 ).
path( 4, 5 ).

%
% Undirected graph, ajacency is bidirectional.
%

adjacent( Node1, Node2 ) :- path( Node1, Node2 ).
adjacent( Node1, Node2 ) :- path( Node2, Node1 ).

%
% Specifications of possible colors for the nodes.
%

color( red ).
color( green ).
color( blue ).
color( white ).

%
% Find a coloring with no conflicts.
%

findcoloring( [], [] ).
findcoloring( [Node | Nodes], [Coloring | Colorings] ) :-
   findcoloring( Nodes, Colorings ),
   Coloring = color( Node, Color ),
   color( Color ),
   noconflict( Coloring, Colorings ).

noconflict( _, [] ).
noconflict( Coloring1, [Coloring2 | Colorings] ) :-
   not( conflict( Coloring1, Coloring2 )),
   noconflict( Coloring1, Colorings ).

conflict( color( Node1, Color ), color( Node2, Color )) :-
   adjacent( Node1, Node2 ).

%
% Trace the relevant relations.
%

traceon :-
   trace( adjacent ),
   trace( color ),
   trace( findcoloring ),
   trace( noconflict ),
   trace( conflict ).

writeallcolorings :-
   writeanycoloring,
   fail.

writeanycoloring :-
   findanycoloring( Coloring ),
   write( Coloring ), nl.

findanycoloring( Coloring ) :-
   graph( Graph ),
   findcoloring( Graph, Coloring ).

@


1.3
log
@-
@
text
@d1 1
a1 1
/* $Id: mapcoloring.pl,v 1.2 2009-02-24 15:16:07-08 - - $ */
d3 7
a9 7
/*
* Map coloring.
*
* Given an adjacency matrix, find a coloring of the map such
* that no two adjacent nodes have the same color.  The four
* color theorem says this is always possible with four colors.
*/
d14 3
a16 3
/*
* Specification of the nodes in the graph and the paths.
*/
d27 3
a29 3
/*
* Undirected graph, ajacency is bidirectional.
*/
d34 3
a36 3
/*
* Specifications of possible colors for the nodes.
*/
d43 3
a45 3
/*
* Find a coloring with no conflicts.
*/
d62 3
a64 3
/*
* Trace the relevant relations.
*/
@


1.2
log
@-
@
text
@d1 1
a1 1
/* $Id: mapcoloring.pl,v 1.1 2009-02-24 15:13:44-08 - - $ */
d49 4
a52 4
	findcoloring( Nodes, Colorings ),
	Coloring = color( Node, Color ),
	color( Color ),
	noconflict( Coloring, Colorings ).
d56 2
a57 2
	not( conflict( Coloring1, Coloring2 )),
	noconflict( Coloring1, Colorings ).
d60 1
a60 1
	adjacent( Node1, Node2 ).
d67 5
a71 5
	trace( adjacent ),
	trace( color ),
	trace( findcoloring ),
	trace( noconflict ),
	trace( conflict ).
d74 2
a75 2
	writeanycoloring,
	fail.
d78 2
a79 2
	findanycoloring( Coloring ),
	write( Coloring ), nl.
d82 2
a83 2
	graph( Graph ),
	findcoloring( Graph, Coloring ).
@


1.1
log
@-
@
text
@d1 1
a1 1
/* $Id: mapcoloring.pl,v 1.1 2008-03-07 18:13:12-08 - - $ */
d11 3
@
