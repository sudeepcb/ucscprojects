head	1.3;
access;
symbols;
locks;
comment	@# @;


1.3
date	2011.05.20.02.53.59;	author -;	state -;
branches;
next	1.2;

1.2
date	2009.02.24.23.41.55;	author -;	state -;
branches;
next	1.1;

1.1
date	2009.02.24.23.24.53;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@% $Id: foxchicken.pl,v 1.2 2009-02-24 15:41:55-08 - - $ */

%
% A farmer has with him a fox, a chicken, and a sack of grain.
% He comes to a river and sees a small boat.  He needs to bring
% all three of his things across the river, but the boat is so
% small that only one thing will fit in it with him.  He can not
% leave the fox and the chicken together or the fox will eat the
% chicken.  He can not leave the chicken and the grain together
% or the chicken will eat the grain.  The fox, however, does not
% eat grain.  How should the farmer proceed?
%

not( X ) :- X, !, fail.
not( _ ).

%
% FACTS AND CULLINARY HABITS:
%

eats( fox, chicken ).
eats( chicken, grain ).
property( [ fox, chicken, grain ] ).
goal( other ).
start( first ).

chow_time( List ) :-
   member_of( Diner, List ),
   member_of( Dinner, List ),
   eats( Diner, Dinner ).

%
% SET RELATIONS:
%

member_of( H, [ H | _ ] ).
member_of( H, [ _ | T ] ) :- member_of( H, T ).

matches( [], [] ).
matches( [ H | T1 ], [ H | T2 ] ) :- matches( T1, T2 ).

removex( H, [ H | T ], T ).
removex( X, [ H | T ], [ H | U ] ) :- removex( X, T, U ).

insert( H, T, [ H | T ] ).

%
% TRAVEL PLANS AND FREQUENT PADDLER MILES.
%

travel :-
   start( From ),
   goal( To ),
   property( Property ),
   print_start( From, To, Property, [] ),
   move( From, To, Property, [], nothing ),
   print_done.

move( From, _, _, [], _ ) :-
   goal( From ).

move( From, To, This, That, _ ) :-
   start( To ),
   goal( From ),
   not( chow_time( This )),
   print_alone( From, To, This, That ),
   move( To, From, That, This, nothing ).

move( From, To, This, That, Just_took ) :-
   removex( What, This, This_later ),
   not( Just_took = What ),
   not( chow_time( This_later )),
   insert( What, That, That_later ),
   print_takes( What, From, To, This_later, That_later ),
   move( To, From, That_later, This_later, What ).

%
% TRAVEL INSTRUCTIONS.
%

print_start( From, To, This, That ) :-
   nl,
   write( 'The farmer is by a river and ' ),
   write( 'wants to take his cargo across.' ),
   nl,
   print_status( From, This ),
   print_status( To, That ).

print_done :-
   nl,
   write( 'Finally, the farmer is done!' ),
   nl.

print_takes( What, From, To, This, That ) :-
   nl,
   write( 'The farmer takes the ' ),
   write( What ),
   write( ' from the ' ),
   write( From ),
   write( ' side to the ' ),
   write( To ),
   write( ' side.' ),
   nl,
   print_status( From, This ),
   print_status( To, That ).

print_alone( From, To, This, That ) :-
   nl,
   write( 'The farmer travels alone from the ' ),
   write( From ),
   write( ' side to the ' ),
   write( To ),
   write( ' side.' ),
   nl,
   print_status( From, This ),
   print_status( To, That ).

print_status( Where, What ) :-
   tab( 10 ),
   write( 'On the ' ),
   write( Where ),
   write( ' side is ' ),
   print_list( nothing, '', What ).

print_list( Nothing, _, [] ) :-
   write( Nothing ),
   write( '.' ),
   nl.

print_list( _, Comma, [ H | T ] ) :-
   write( Comma ),
   write( 'the ' ),
   write( H ),
   print_list( '', ', ', T ).

%
% TRACE ON COMMAND.
%

trace_on :-
   trace( eats ),
   trace( property ),
   trace( goal ),
   trace( start ),
   trace( chow_time ),
   trace( member_of ),
   trace( matches ),
   trace( removex ),
   trace( insert ),
   trace( travel ),
   trace( move ).

%
% The following, plus the hashbang at the top, make this program
% run as a script.  Delete the halt to use the program interactively.
%

% TEST: travel.

@


1.2
log
@-
@
text
@d1 1
a1 1
/* $Id: foxchicken.pl,v 1.1 2009-02-24 15:24:53-08 - - $ */
d3 10
a12 10
/*
* A farmer has with him a fox, a chicken, and a sack of grain.
* He comes to a river and sees a small boat.  He needs to bring
* all three of his things across the river, but the boat is so
* small that only one thing will fit in it with him.  He can not
* leave the fox and the chicken together or the fox will eat the
* chicken.  He can not leave the chicken and the grain together
* or the chicken will eat the grain.  The fox, however, does not
* eat grain.  How should the farmer proceed?
*/
d17 3
a19 3
/*
* FACTS AND CULLINARY HABITS:
*/
d32 3
a34 3
/*
* SET RELATIONS:
*/
d47 3
a49 3
/*
* TRAVEL PLANS AND FREQUENT PADDLER MILES.
*/
d77 3
a79 3
/*
* TRAVEL INSTRUCTIONS.
*/
d136 3
a138 3
/*
* TRACE ON COMMAND.
*/
d153 6
a158 4
/*
* The following, plus the hashbang at the top, make this program
* run as a script.  Delete the halt to use the program interactively.
*/
a159 2
:- travel.
:- halt.
@


1.1
log
@-
@
text
@d1 1
a1 1
/* $Id: foxchicken.pl,v 1.3 2008-03-07 18:22:18-08 - - $ */
d28 3
a30 3
	member_of( Diner, List ),
	member_of( Dinner, List ),
	eats( Diner, Dinner ).
d52 6
a57 6
	start( From ),
	goal( To ),
	property( Property ),
	print_start( From, To, Property, [] ),
	move( From, To, Property, [], nothing ),
	print_done.
d60 1
a60 1
	goal( From ).
d63 5
a67 5
	start( To ),
	goal( From ),
	not( chow_time( This )),
	print_alone( From, To, This, That ),
	move( To, From, That, This, nothing ).
d70 6
a75 6
	removex( What, This, This_later ),
	not( Just_took = What ),
	not( chow_time( This_later )),
	insert( What, That, That_later ),
	print_takes( What, From, To, This_later, That_later ),
	move( To, From, That_later, This_later, What ).
d82 6
a87 6
	nl,
	write( 'The farmer is by a river and ' ),
	write( 'wants to take his cargo across.' ),
	nl,
	print_status( From, This ),
	print_status( To, That ).
d90 3
a92 3
	nl,
	write( 'Finally, the farmer is done!' ),
	nl.
d95 11
a105 11
	nl,
	write( 'The farmer takes the ' ),
	write( What ),
	write( ' from the ' ),
	write( From ),
	write( ' side to the ' ),
	write( To ),
	write( ' side.' ),
	nl,
	print_status( From, This ),
	print_status( To, That ).
d108 9
a116 9
	nl,
	write( 'The farmer travels alone from the ' ),
	write( From ),
	write( ' side to the ' ),
	write( To ),
	write( ' side.' ),
	nl,
	print_status( From, This ),
	print_status( To, That ).
d119 5
a123 5
	tab( 10 ),
	write( 'On the ' ),
	write( Where ),
	write( ' side is ' ),
	print_list( nothing, '', What ).
d126 3
a128 3
	write( Nothing ),
	write( '.' ),
	nl.
d131 4
a134 4
	write( Comma ),
	write( 'the ' ),
	write( H ),
	print_list( '', ', ', T ).
d141 11
a151 11
	trace( eats ),
	trace( property ),
	trace( goal ),
	trace( start ),
	trace( chow_time ),
	trace( member_of ),
	trace( matches ),
	trace( removex ),
	trace( insert ),
	trace( travel ),
	trace( move ).
@
