head	1.4;
access;
symbols;
locks;
comment	@# @;


1.4
date	2012.03.07.04.52.27;	author -;	state -;
branches;
next	1.3;

1.3
date	2011.05.20.02.42.50;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.05.20.02.35.46;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.05.20.02.21.18;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@#!/usr/bin/perl
# $Id: mkpl,v 1.3 2011-05-19 19:42:50-07 - - $

use strict;
use warnings;
$0 =~ s|.*/||;

sub sendexpect ($) {
   my ($line) = @@_;
   $line =~ s/\[/\\[/g;
   print EXPECT "send \"$line\\n\"\n";
   print EXPECT "expect \"|\"\n";
}

sub maketest ($@@) {
   my ($prog, @@inputs) = @@_;
   my $cmd = "| expect >$prog.lis 2>&1";
   open EXPECT, $cmd or die "$0: $cmd: $!\n";
   print "$0: open: $cmd: OK\n";
   my $wait = "expect \"|\"\n";
   print EXPECT "spawn gprolog\n";
   (my $base = $prog) =~ s/\.pl$//;
   unshift @@inputs, "[$base].";
   push @@inputs, "halt.";
   for my $input (@@inputs) {
      print "$0: % TEST: $input\n";
      print EXPECT "expect -re \"^\"\n";
      sendexpect "$input\n";
   }
   print EXPECT "wait\n";
   print EXPECT "close\n";
   close EXPECT;
   system "cat $prog.lis";
   system "mkpspdf $prog.ps $prog $prog.lis";
}

for my $prog (@@ARGV) {
   open PROG, "<$prog" or warn "$0: $prog: $!\n" and next;
   my @@tests = grep {s/^\s*%\s*TEST:\s*(.*)\n/$1/ and $_} <PROG>;
   close PROG;
   maketest $prog, @@tests;
}

@


1.3
log
@-
@
text
@d2 1
a2 1
# $Id: mkpl,v 1.2 2011-05-19 19:35:46-07 - - $
d27 1
a27 1
      print EXPECT "expect -re \"^|\"\n";
a43 26
__END__
maketest "allpairs", <<END;
allpairs.
END

__END__
maketest "dfa", <<END;
match( [b, b, a, a, b, a, b]).

match( [b, b, b, b]).

END

maketest "einstein", <<END;
riddle.
END

maketest "factorial", <<END;
factorial(5,N).
factorial(20,N).
END

maketest "foxchicken", <<END;
travel.
halt.
END
@


1.2
log
@-
@
text
@d2 1
a2 1
# $Id: mk.tests,v 1.1 2009-03-03 18:19:35-08 - - $
d34 1
a34 1
   #system "mkpspdf $prog.ps $prog $prog.lis";
@


1.1
log
@-
@
text
@d16 2
a17 2
   my ($prog, @@input) = @@_;
   my $cmd = "| expect >$prog.out 2>&1";
d23 3
a25 2
   sendexpect "[$base].";
   for my $input (@@input) {
d27 1
d30 1
a30 1
   sendexpect "halt.";
d33 2
a34 1
   system "cat $prog.out";
@
